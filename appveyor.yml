os:
- Windows Server 2012 R2

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  # https://www.appveyor.com/docs/build-environment/#miniconda
  matrix:
  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    PYTHON: "C:\\Miniconda35-x64"
    PYTHON_VERSION: "3.5"
    PYTHON_ARCH: "64"

  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    PYTHON: "C:\\Miniconda36-x64"
    PYTHON_VERSION: "3.6"
    PYTHON_ARCH: "64"

  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    PYTHON: "C:\\Miniconda36-x64"
    PYTHON_VERSION: "3.6"
    PYTHON_ARCH: "64"

  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    PYTHON: "C:\\Miniconda37-x64"
    PYTHON_VERSION: "3.7"
    PYTHON_ARCH: "64"

  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    PYTHON: "C:\\Miniconda37-x64"
    PYTHON_VERSION: "3.7"
    PYTHON_ARCH: "64"

  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    PYTHON: "C:\\Miniconda37-x64"
    PYTHON_VERSION: "3.7"
    PYTHON_ARCH: "64"

  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    PYTHON: "C:\\Miniconda38-x64"
    PYTHON_VERSION: "3.8"
    PYTHON_ARCH: "64"

  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    PYTHON: "C:\\Miniconda38-x64"
    PYTHON_VERSION: "3.8"
    PYTHON_ARCH: "64"

  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    PYTHON: "C:\\Miniconda38-x64"
    PYTHON_VERSION: "3.8"
    PYTHON_ARCH: "64"

install:
  - python -m pip install -r requirements.txt
  - python -m pip install -r requirements-test.txt
  # - conda install -y -q wheel
  # - conda install -y -q setuptools


build_script:
  # conda 
  # - conda install -y -q Cython
  # - conda install -y -q numpy
  # build use setup.py
  - python setup.py build_ext -i
  - python setup.py install


test_script:
  # - nosetests -A "%NOSEATTR%" --verbose
  # - nosetests --verbose
  - nosetests ./tests/test_rect.py --with-coverage

after_test:
  # If tests are successful, create binary packages for the project.
  - python setup.py bdist_wheel"
  - rem "%CMD_IN_ENV% python setup.py bdist_wininst"
  - rem "%CMD_IN_ENV% python setup.py bdist_msi"
  - ps: "ls dist"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
- path: dist\*
  name: 'Test file'

deploy:
  provider: GitHub
  release: $(APPVEYOR_REPO_TAG_NAME)
  description: ''
  auth_token: $(github_access)
  artifact: 'Test file'
  draft: false
  prerelease: false
  on:
    APPVEYOR_REPO_TAG: true
