# https://www.appveyor.com/docs/windows-images-software/
#os:
#  # vs2015
#  # - Windows Server 2012 R2
#  # vs2017
#  # - Windows Server 2016
#  # vs2019
#  # - Windows Server 2019

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  # https://www.appveyor.com/docs/build-environment/#miniconda
  matrix:
  - os: Windows Server 2012 R2
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    CMAKE_GERENATOR: 'Visual Studio 14 2015 Win64'
    PYTHON: "C:\\Miniconda35-x64"
    PYTHON_VERSION: "3.5"
    PYTHON_ARCH: "64"

  - os: Windows Server 2012 R2
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    CMAKE_GERENATOR: 'Visual Studio 14 2015 Win64'
    PYTHON: "C:\\Miniconda36-x64"
    PYTHON_VERSION: "3.6"
    PYTHON_ARCH: "64"

  - os: Windows Server 2016
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    CMAKE_GERENATOR: 'Visual Studio 15 2017 Win64'
    PYTHON: "C:\\Miniconda36-x64"
    PYTHON_VERSION: "3.6"
    PYTHON_ARCH: "64"

  - os: Windows Server 2012 R2
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    CMAKE_GERENATOR: 'Visual Studio 14 2015 Win64'
    PYTHON: "C:\\Miniconda37-x64"
    PYTHON_VERSION: "3.7"
    PYTHON_ARCH: "64"

  - os: Windows Server 2016
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    CMAKE_GERENATOR: 'Visual Studio 15 2017 Win64'
    PYTHON: "C:\\Miniconda37-x64"
    PYTHON_VERSION: "3.7"
    PYTHON_ARCH: "64"

  - os: Windows Server 2019
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    CMAKE_GERENATOR: 'Visual Studio 16 2019 Win64'
    PYTHON: "C:\\Miniconda37-x64"
    PYTHON_VERSION: "3.7"
    PYTHON_ARCH: "64"

    # matrix:
    #   exclude:
    #     - os: Windows Server 2012 R2
    #       APPVEYOR_BUILD_WORKER_IMAGE: "Visual Studio 2017"
    #     - os: Visual Studio 2017
    #       APPVEYOR_BUILD_WORKER_IMAGE: "Previous Visual Studio 2019"
    #   fast_finish: true

install:
  - "%PYTHON%/python.exe -m pip install --upgrade pip"
  - "%PYTHON%/python.exe -m pip install -r requirements.txt"
  - "%PYTHON%/python.exe -m pip install -r requirements-test.txt"
  # - conda install -y -q wheel
  # - conda install -y -q setuptools


build_script:
  # conda 
  # - conda install -y -q Cython
  # - conda install -y -q numpy
  # build use setup.py
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2015" (call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64\vcvars64.bat")
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2017" (call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64) & (set VS140COMNTOOLS=%VS150COMNTOOLS%)
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2019" (call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64) & (set VS140COMNTOOLS=%VS160COMNTOOLS%)
  #- "%PYTHON%/python.exe setup.py develop"
  - "%PYTHON%/python.exe setup.py develop -G=''%CMAKE_GERENATOR%''"
  - "%PYTHON%/python.exe setup.py install -G=''%CMAKE_GERENATOR%''"


test_script:
  # - nose2 -A "%NOSEATTR%" --verbose
  # - nose2 --verbose
  - nose2 --with-coverage

after_test:
  # If tests are successful, create binary packages for the project.
  - "%PYTHON%/python.exe setup.py bdist_wheel"
  - rem "%CMD_IN_ENV% %PYTHON%/python.exe setup.py bdist_wininst"
  - rem "%CMD_IN_ENV% %PYTHON%/python.exe setup.py bdist_msi"
  - ps: "ls dist"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
- path: dist\*
  name: 'Test file'

deploy:
  provider: GitHub
  release: $(APPVEYOR_REPO_TAG_NAME)
  description: ''
  auth_token: $(github_access)
  artifact: 'Test file'
  draft: false
  prerelease: false
  on:
    APPVEYOR_REPO_TAG: true
