name: Packaging

on: [push]

jobs:
  build_sdist:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: python -m pip install -r requirements.txt
    - name: build source  
      run: python setup.py sdist
    - uses: actions/upload-artifact@v1
      with:
        name: scikit-build-template
        path: dist

  build_wheel_linux:
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04]
        python-version: [3.5, 3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: python -m pip install -r requirements.txt
    - name: Create packages
      run: |
        #pip-custom-platform wheel --platform ${{matrix.platform}} scikit_build_template
        python setup.py bdist_wheel
    #- name: Rename wheel
    #  run: mv scikit-build-template
    - uses: actions/upload-artifact@v1
      with:
        name: scikit-build-template
        path: dist
#   #- name: Publish distribution ðŸ“¦  to Test PyPI
#   #    uses: pypa/gh-action-pypi-publish@master
#   #    with:
#   #      password: ${{ secrets.test_pypi_password }}
#   #      repository_url: https://test.pypi.org/legacy/
#   #- name: Publish distribution ðŸ“¦  to PyPI
#   #  if: startsWith(github.ref, 'refs/tags')
#   #  uses: pypa/gh-action-pypi-publish@master
#   #  with:
#   #    password: ${{ secrets.pypi_password }}

  build_wheel_manylinux:
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest]
    steps:
    - name: Install dependencies
      run: python -m pip install -r requirements.txt
    - uses: actions/checkout@v1
    - name: Build manylinux1/2010/2014 wheel
      run: |
        #docker info
        #./scripts/build_manylinux_wrapper.sh
        python setup.py bdist_wheel -p manylinux1_x86_64
        python setup.py bdist_wheel -p manylinux2010_x86_64
        python setup.py bdist_wheel -p manylinux2014_x86_64


  build_wheel_macos:
    runs-on: macos-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: python -m pip install -r requirements.txt
    - name: Create packages
      run: python setup.py bdist_wheel
    - name: delocate for macOS wheels
      run: |
        python -m pip install --upgrade delocate -q
        delocate-addplat --rm-orig \
          -p macosx_10_15_x86_64 \
          -p macosx_10_14_x86_64 \
          -p macosx_10_13_x86_64 \
          -p macosx_10_12_x86_64 \
          -p macosx_10_11_x86_64 \
          -p macosx_10_10_x86_64 \
          -p macosx_10_9_x86_64 \
          dist/*.whl
    - uses: actions/upload-artifact@master
      with:
        name: scikit-build-template
        path: dist

  build_wheel_windows:
    runs-on: windows-2019
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]
        #architecture: ['x86', 'x64']
        architecture: ['x64']
    steps:
    - uses: actions/checkout@master
    - name: Set up Python ${{ matrix.python-version }} (${{ matrix.architecture }})
      uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}
    # Install Microsoft Visual C++ Compiler for Python 2.7
    # http://aka.ms/vcpython27
    - name: Install MSVC++ for Python 2.7
      if: matrix.python-version == 2.7
      run: choco install vcpython27 -y
    #- name: Install Visual C++ Build Tools 2015
    #  if: matrix.python-version != 2.7
    #  run: choco install -y VisualCppBuildTools
    - name: Install Visual Studio 2017
      if: matrix.python-version != 2.7
      run: |
        choco install -y windows-sdk-10.1
        choco install -y visualstudio2017-installer
        choco install -y microsoft-build-tools
    - name: Install dependencies
      run: python -m pip install -r requirements.txt
    - uses: ilammy/msvc-dev-cmd@v1.4.1
    - name: Create packages
      run: |
        python setup.py bdist_wheel -G "NMake Makefiles"
    - uses: actions/upload-artifact@master
      with:
        name: scikit-build-template
        path: dist

  upload_package:
    needs:
      - build_sdist
      #- build_wheel_linux
      - build_wheel_manylinux
      - build_wheel_macos
      - build_wheel_windows
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: scikit-build-template
        path: dist
    - name: Show result
      run: ls -l dist
    #- name: Install pep517
    #  run: >-
    #    python -m
    #    pip install
    #    pep517
    #    --user
    # - name: Build a binary wheel and a source tarball
    #   run: >-
    #     python -m
    #     pep517.build
    #     --source
    #     --binary
    #     --out-dir dist/
    #     .
    - name: Publish distribution ðŸ“¦   to Test PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.test_pypi_password }}
        repository_url: https://test.pypi.org/legacy/
    - name: Publish distribution ðŸ“¦   to PyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}

